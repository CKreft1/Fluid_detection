import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

img=cv.imread("Photos/testslide.jpg")
blank=np.zeros(img.shape[:2], dtype="uint8")
blank2=blank.copy()
b,g,r= cv.split(img)
greenthreshold, greenthresh=cv.threshold(g, 200, 255, cv.THRESH_BINARY)
cv.imshow("image", img)
cv.imshow("greenthresh", greenthresh)



circles = cv.HoughCircles(greenthresh, cv.HOUGH_GRADIENT,1,20, param1=4,param2=7,minRadius=1,maxRadius=10)
circles = np.uint16(np.around(circles))
for i in circles[0,:]:
    # draw the center of the circle
    # cv.circle(img,(i[0],i[1]),2,(255,0,255),3)
    # draw the outer circle
    if i[2]<=5:
        cv.circle(blank,(i[0],i[1]),(i[2]+3),(255,255,255),-1)
    else:
        cv.circle(blank,(i[0],i[1]),i[2],(255,255,255),-1)
    # cv.circle(img,(i[0],i[1]),2,(0,0,0),3)
mask=cv.bitwise_not(blank)
masked_thresh=cv.bitwise_and(greenthresh, greenthresh, mask=mask)
masked_img=cv.bitwise_and(img, img, mask=mask)

def get_passing_big_circles(img):
    blank=np.zeros(img.shape[:2], dtype="uint8")
    b,g,r= cv.split(img)
    greenthreshold, greenthresh=cv.threshold(g, 200, 255, cv.THRESH_BINARY)
    circles = cv.HoughCircles(greenthresh, cv.HOUGH_GRADIENT,1,20, param1=4,param2=7,minRadius=19,maxRadius=22)
    circles = np.uint16(np.around(circles))
    circles_pass=[]
    for i in circles[0,:]:
        pi=3.14
        indivblank=cv.circle(blank.copy(), (i[0],i[1]), (i[2]), (255,255,255),-1)
        area=pi*(i[2]^2)
        indivmasked=cv.bitwise_and(greenthresh.copy(), greenthresh.copy(), mask=indivblank)
        x=img.shape[1]
        y=img.shape[0]
        unthresholded_count=0
        for l in range(y):
            for m in range(x):
                pixel_greenthresh=greenthresh[l,m]
                pixel_mask=indivblank[l,m]
                if pixel_greenthresh==0 and pixel_mask==255:
                    unthresholded_count+=1
        if unthresholded_count/area<.1:
            circles_pass=circles_pass+[i]
    for i in circles_pass:
        blank=cv.circle(blank, (i[0],i[1]), (i[2]), (255,255,255),-1)
        mask=cv.bitwise_not(blank)
        img=cv.bitwise_and(img, img, mask=mask)
    return blank

def get_number_of_thresholded_pixels(image):
    x=image.shape[1]
    y=image.shape[0]
    thresholded_pixelnumber=0
    unthresholded_pixelnumber=0
    for i in range(y):
        for l in range(x):
            pixel=image[i,l]
            if pixel==255:
                thresholded_pixelnumber+=1
            else:
                unthresholded_pixelnumber+=1

    return (thresholded_pixelnumber, unthresholded_pixelnumber)
    #run this on a thresholded image to get the number of thresholded and unthresholded pixels

def get_image_area(image):
    x=image.shape[1]
    y=image.shape[0]
    area=x*y
    return area
    #self-explanatory

def calculate_proportion_thresholded(image):
    thresholded=get_number_of_thresholded_pixels(image)[1]
    area=get_image_area(image)
    percent=(thresholded/area)
    return percent
    #combines input from previous functions to give a decimal representing the proportion of thresholded pixels
    #change 0 to a 1 to get the number of unthresholded pixels, and the 2 outputs should add up to 1.

blank3=get_passing_big_circles(img)
big_mask=cv.bitwise_not(blank3)
masked_thresh=cv.bitwise_and(masked_thresh, masked_thresh, mask=big_mask)
print(calculate_proportion_thresholded(masked_thresh))
cv.imshow("final_thresh", masked_thresh)
cv.imshow("image", masked_img)
